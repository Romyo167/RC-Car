
RC_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  00000958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ef  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000933  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  0000358e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LD293_init>:
	OCR0B = spd;
	OCR2A = (spd * 75)/ 100;
	OCR2B = spd;
	DDRD |= ( 1 << PIND5);
	DDRB |= (1 << PINB3);
	DDRD &=  ~((1 << PIND6) | (1 << PIND3));
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	84 bd       	out	0x24, r24	; 36
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	84 bd       	out	0x24, r24	; 36
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	84 bd       	out	0x24, r24	; 36
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bd       	out	0x25, r24	; 37
  be:	e0 eb       	ldi	r30, 0xB0	; 176
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 83       	st	Z, r24
  d4:	e1 eb       	ldi	r30, 0xB1	; 177
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <L293D_setSpeed>:
  e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <spd+0x1>
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <spd>
  e8:	4e e1       	ldi	r20, 0x1E	; 30
  ea:	48 9f       	mul	r20, r24
  ec:	90 01       	movw	r18, r0
  ee:	49 9f       	mul	r20, r25
  f0:	30 0d       	add	r19, r0
  f2:	11 24       	eor	r1, r1
  f4:	c9 01       	movw	r24, r18
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	0e 94 c1 03 	call	0x782	; 0x782 <__divmodhi4>
  fe:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <speed_to_distance+0x1>
 102:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <speed_to_distance>
 106:	08 95       	ret

00000108 <L293D_moveForward>:
 108:	ea e0       	ldi	r30, 0x0A	; 10
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	80 81       	ld	r24, Z
 10e:	87 bd       	out	0x27, r24	; 39
 110:	80 81       	ld	r24, Z
 112:	88 bd       	out	0x28, r24	; 40
 114:	80 81       	ld	r24, Z
 116:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 11a:	80 81       	ld	r24, Z
 11c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 120:	55 9a       	sbi	0x0a, 5	; 10
 122:	23 9a       	sbi	0x04, 3	; 4
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	87 7b       	andi	r24, 0xB7	; 183
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	08 95       	ret

0000012c <L293D_moveBackward>:
 12c:	ea e0       	ldi	r30, 0x0A	; 10
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	87 bd       	out	0x27, r24	; 39
 134:	80 81       	ld	r24, Z
 136:	88 bd       	out	0x28, r24	; 40
 138:	80 81       	ld	r24, Z
 13a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 13e:	80 81       	ld	r24, Z
 140:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 144:	55 98       	cbi	0x0a, 5	; 10
 146:	23 98       	cbi	0x04, 3	; 4
 148:	56 9a       	sbi	0x0a, 6	; 10
 14a:	53 9a       	sbi	0x0a, 3	; 10
 14c:	08 95       	ret

0000014e <L293D_moveLeft>:
 14e:	ea e0       	ldi	r30, 0x0A	; 10
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	87 bd       	out	0x27, r24	; 39
 156:	80 81       	ld	r24, Z
 158:	88 bd       	out	0x28, r24	; 40
 15a:	80 81       	ld	r24, Z
 15c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 160:	80 81       	ld	r24, Z
 162:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 166:	55 98       	cbi	0x0a, 5	; 10
 168:	23 9a       	sbi	0x04, 3	; 4
 16a:	56 98       	cbi	0x0a, 6	; 10
 16c:	53 98       	cbi	0x0a, 3	; 10
 16e:	08 95       	ret

00000170 <L293D_moveRight>:
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	80 81       	ld	r24, Z
 176:	87 bd       	out	0x27, r24	; 39
 178:	80 81       	ld	r24, Z
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	80 81       	ld	r24, Z
 17e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 182:	80 81       	ld	r24, Z
 184:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 188:	55 9a       	sbi	0x0a, 5	; 10
 18a:	23 98       	cbi	0x04, 3	; 4
 18c:	56 98       	cbi	0x0a, 6	; 10
 18e:	08 95       	ret

00000190 <L293_moveLeftForward>:
	
}

void L293_moveLeftForward(){
	OCR0A = (spd * 75)/ 100;
 190:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <spd>
 194:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <spd+0x1>
 198:	4b e4       	ldi	r20, 0x4B	; 75
 19a:	42 9f       	mul	r20, r18
 19c:	c0 01       	movw	r24, r0
 19e:	43 9f       	mul	r20, r19
 1a0:	90 0d       	add	r25, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	64 e6       	ldi	r22, 0x64	; 100
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 c1 03 	call	0x782	; 0x782 <__divmodhi4>
 1ac:	67 bd       	out	0x27, r22	; 39
	OCR0B = spd;
 1ae:	ea e0       	ldi	r30, 0x0A	; 10
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	80 81       	ld	r24, Z
 1b4:	88 bd       	out	0x28, r24	; 40
	OCR2A =  spd;
 1b6:	80 81       	ld	r24, Z
 1b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = spd;
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	DDRD |= ( 1 << PIND5);
 1c2:	55 9a       	sbi	0x0a, 5	; 10
	DDRB |= (1 << PINB3);
 1c4:	23 9a       	sbi	0x04, 3	; 4
	DDRD &=  ~((1 << PIND6) | (1 << PIND3));
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	87 7b       	andi	r24, 0xB7	; 183
 1ca:	8a b9       	out	0x0a, r24	; 10
 1cc:	08 95       	ret

000001ce <L293D_stop>:
	
}
void L293D_stop(){
	DDRB &= ~(1 << PINB3);
 1ce:	23 98       	cbi	0x04, 3	; 4
	DDRD &= ~(1 << PIND5);
 1d0:	55 98       	cbi	0x0a, 5	; 10
	DDRD &=  ~((1 << PIND6) | (1 << PIND3));
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	87 7b       	andi	r24, 0xB7	; 183
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	08 95       	ret

000001da <Ultrasonic_init>:
static volatile int update = 0;
  


void Ultrasonic_init(){
	 DDRD &= ~(1 << PIND2);    // Used as Echo pin of ultrasonic
 1da:	52 98       	cbi	0x0a, 2	; 10
	 DDRC |= (1 << PINC5);     // Trig pin of ultrasonic
 1dc:	3d 9a       	sbi	0x07, 5	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	83 ed       	ldi	r24, 0xD3	; 211
 1e0:	90 e3       	ldi	r25, 0x30	; 48
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Ultrasonic_init+0x8>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Ultrasonic_init+0xe>
 1e8:	00 00       	nop
	  _delay_ms(50);           // delay

     EIMSK |= (1 << INT0);     // External control interrupt register.
 1ea:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1 << ISC00);
 1ec:	e9 e6       	ldi	r30, 0x69	; 105
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <Take_Reading>:
	 
}

//Take reading from Ultrasonic sensor
void Take_Reading(){
	PORTC |= (1 << PINC5); 
 1f8:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <Take_Reading+0x4>
	_delay_us(15);
	PORTC &= ~(1 << PINC5);
 200:	45 98       	cbi	0x08, 5	; 8
 202:	08 95       	ret

00000204 <__vector_1>:
}
 ISR(INT0_vect)
 {
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	 
	if(update == 1)
 21a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 21e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	c9 f4       	brne	.+50     	; 0x258 <__vector_1+0x54>
	 {
		 TCCR1B &= ~(1 << CS10);    //Disabling Timer/Counter  
 226:	e1 e8       	ldi	r30, 0x81	; 129
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	8e 7f       	andi	r24, 0xFE	; 254
 22e:	80 83       	st	Z, r24
		 num_of_pulses = TCNT1; //Read the value from the sensor
 230:	e4 e8       	ldi	r30, 0x84	; 132
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	a0 e0       	ldi	r26, 0x00	; 0
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <num_of_pulses>
 240:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <num_of_pulses+0x1>
 244:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <num_of_pulses+0x2>
 248:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <num_of_pulses+0x3>
		 TCNT1 = 0;     //Reset
 24c:	11 82       	std	Z+1, r1	; 0x01
 24e:	10 82       	st	Z, r1
		 update = 0;  
 250:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 254:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	 }

	 if(update == 0)
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 25c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 260:	89 2b       	or	r24, r25
 262:	59 f4       	brne	.+22     	; 0x27a <__vector_1+0x76>
	 {
		 TCCR1B |= 1<<CS10;  //Start counting in microseconds
 264:	e1 e8       	ldi	r30, 0x81	; 129
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
		 update = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	 }
	 
	 
 }
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:
	 DDRB |= (1 << PINB1);                            /* set pin for output */
 }
 
 
int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	60 97       	sbiw	r28, 0x10	; 16
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	// intialization steps
	LD293_init();
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <LD293_init>
	USART_init(9600 ,F_CPU);   // X parameters aren't used for more info, Go to USART.c
 2a8:	60 e4       	ldi	r22, 0x40	; 64
 2aa:	72 e4       	ldi	r23, 0x42	; 66
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	95 e2       	ldi	r25, 0x25	; 37
 2b0:	0e 94 31 03 	call	0x662	; 0x662 <USART_init>
	L293D_setSpeed(255);       // Set initial speed as maximum
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
    Ultrasonic_init();         // initialize ultrasonic to be used in Timer interrupt mode
 2bc:	0e 94 ed 00 	call	0x1da	; 0x1da <Ultrasonic_init>
  // Using Timer 1 To control servo motor using Fast PWM
 static inline void initTimer1Servo(void) {
	 
	 /* Set up Timer1 (16bit) to give a pulse every 20ms */
	 /* Use Fast PWM mode, counter max in ICR1 */
	 TCCR1A |= (1 << WGM11);
 2c0:	e0 e8       	ldi	r30, 0x80	; 128
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	80 83       	st	Z, r24
	 TCCR1B |= (1 << WGM12) | (1 << WGM13);
 2ca:	a1 e8       	ldi	r26, 0x81	; 129
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	88 61       	ori	r24, 0x18	; 24
 2d2:	8c 93       	st	X, r24
	 TCCR1B |= (1 << CS10);  /* /1 prescaling -- counting in microseconds */
 2d4:	8c 91       	ld	r24, X
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	8c 93       	st	X, r24
	 ICR1 = 20000;                                    /* TOP value = 20ms */
 2da:	80 e2       	ldi	r24, 0x20	; 32
 2dc:	9e e4       	ldi	r25, 0x4E	; 78
 2de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	 TCCR1A |= (1 << COM1A1);
 2e6:	80 81       	ld	r24, Z
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	80 83       	st	Z, r24
	 /* Direct output on PB1 / OC1A */
	 DDRB |= (1 << PINB1);                            /* set pin for output */
 2ec:	21 9a       	sbi	0x04, 1	; 4
	LD293_init();
	USART_init(9600 ,F_CPU);   // X parameters aren't used for more info, Go to USART.c
	L293D_setSpeed(255);       // Set initial speed as maximum
    Ultrasonic_init();         // initialize ultrasonic to be used in Timer interrupt mode
	initTimer1Servo();         // initialize Servo motor
	sei();
 2ee:	78 94       	sei
		// take readings
		int i ;
		distance = 0;
		for(i = 0; i < 10 ; i++){
		Take_Reading();
		distance +=  num_of_pulses / 58;
 2f0:	0f 2e       	mov	r0, r31
 2f2:	fa e3       	ldi	r31, 0x3A	; 58
 2f4:	8f 2e       	mov	r8, r31
 2f6:	91 2c       	mov	r9, r1
 2f8:	a1 2c       	mov	r10, r1
 2fa:	b1 2c       	mov	r11, r1
 2fc:	f0 2d       	mov	r31, r0
		_delay_ms(10);
		}
		
		distance = distance / 10;
 2fe:	0f 2e       	mov	r0, r31
 300:	fa e0       	ldi	r31, 0x0A	; 10
 302:	4f 2e       	mov	r4, r31
 304:	51 2c       	mov	r5, r1
 306:	61 2c       	mov	r6, r1
 308:	71 2c       	mov	r7, r1
 30a:	f0 2d       	mov	r31, r0
		// For debugging purposes I printed the distance 
		itoa(distance,show_a,10);
		USART_sendString(show_a);
		USART_send('\n');
		
		 OCR1A = PULSE_MID;  // make the motor at the middle
 30c:	0f 2e       	mov	r0, r31
 30e:	f8 e8       	ldi	r31, 0x88	; 136
 310:	ef 2e       	mov	r14, r31
 312:	f1 2c       	mov	r15, r1
 314:	f0 2d       	mov	r31, r0
 316:	0f 2e       	mov	r0, r31
 318:	fc ed       	ldi	r31, 0xDC	; 220
 31a:	cf 2e       	mov	r12, r31
 31c:	f5 e0       	ldi	r31, 0x05	; 5
 31e:	df 2e       	mov	r13, r31
 320:	f0 2d       	mov	r31, r0
  // Using Timer 1 To control servo motor using Fast PWM
 static inline void initTimer1Servo(void) {
	 
	 /* Set up Timer1 (16bit) to give a pulse every 20ms */
	 /* Use Fast PWM mode, counter max in ICR1 */
	 TCCR1A |= (1 << WGM11);
 322:	68 94       	set
 324:	22 24       	eor	r2, r2
 326:	27 f8       	bld	r2, 7
 328:	31 2c       	mov	r3, r1
 
    while (1) 
    {  
		// take readings
		int i ;
		distance = 0;
 32a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <distance>
 32e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <distance+0x1>
 332:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <distance+0x2>
 336:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <distance+0x3>
 33a:	0a e0       	ldi	r16, 0x0A	; 10
 33c:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; i < 10 ; i++){
		Take_Reading();
 33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Take_Reading>
		distance +=  num_of_pulses / 58;
 342:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <num_of_pulses>
 346:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <num_of_pulses+0x1>
 34a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num_of_pulses+0x2>
 34e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num_of_pulses+0x3>
 352:	a5 01       	movw	r20, r10
 354:	94 01       	movw	r18, r8
 356:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divmodsi4>
 35a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 35e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 362:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 366:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	a4 1f       	adc	r26, r20
 370:	b5 1f       	adc	r27, r21
 372:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <distance>
 376:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <distance+0x1>
 37a:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <distance+0x2>
 37e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	83 ec       	ldi	r24, 0xC3	; 195
 384:	99 e0       	ldi	r25, 0x09	; 9
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0xf6>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0xfc>
 38c:	00 00       	nop
 38e:	01 50       	subi	r16, 0x01	; 1
 390:	11 09       	sbc	r17, r1
    while (1) 
    {  
		// take readings
		int i ;
		distance = 0;
		for(i = 0; i < 10 ; i++){
 392:	a9 f6       	brne	.-86     	; 0x33e <main+0xae>
		Take_Reading();
		distance +=  num_of_pulses / 58;
		_delay_ms(10);
		}
		
		distance = distance / 10;
 394:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <distance>
 398:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <distance+0x1>
 39c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <distance+0x2>
 3a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <distance+0x3>
 3a4:	a3 01       	movw	r20, r6
 3a6:	92 01       	movw	r18, r4
 3a8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodsi4>
 3ac:	da 01       	movw	r26, r20
 3ae:	c9 01       	movw	r24, r18
 3b0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <distance>
 3b4:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <distance+0x1>
 3b8:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <distance+0x2>
 3bc:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <distance+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>
		// For debugging purposes I printed the distance 
		itoa(distance,show_a,10);
		USART_sendString(show_a);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 b2 03 	call	0x764	; 0x764 <USART_sendString>
		USART_send('\n');
 3d4:	8a e0       	ldi	r24, 0x0A	; 10
 3d6:	0e 94 aa 03 	call	0x754	; 0x754 <USART_send>
		
		 OCR1A = PULSE_MID;  // make the motor at the middle
 3da:	f7 01       	movw	r30, r14
 3dc:	d1 82       	std	Z+1, r13	; 0x01
 3de:	c0 82       	st	Z, r12
		 * when the distance is less than 25
		 * Stop the car
		 */
		
		// If RC Car is not at STOP state
		if(Stop_flag == 0){
 3e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stop_flag>
 3e4:	81 11       	cpse	r24, r1
 3e6:	a1 cf       	rjmp	.-190    	; 0x32a <main+0x9a>
		if(distance < 30){  // if distance is less than threshold
 3e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 3ec:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 3f0:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 3f4:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 3f8:	4e 97       	sbiw	r24, 0x1e	; 30
 3fa:	a1 05       	cpc	r26, r1
 3fc:	b1 05       	cpc	r27, r1
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	94 cf       	rjmp	.-216    	; 0x32a <main+0x9a>
		 L293D_stop();                    // Stop the` car
 402:	0e 94 e7 00 	call	0x1ce	; 0x1ce <L293D_stop>
  // Using Timer 1 To control servo motor using Fast PWM
 static inline void initTimer1Servo(void) {
	 
	 /* Set up Timer1 (16bit) to give a pulse every 20ms */
	 /* Use Fast PWM mode, counter max in ICR1 */
	 TCCR1A |= (1 << WGM11);
 406:	f1 01       	movw	r30, r2
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
	 TCCR1B |= (1 << WGM12) | (1 << WGM13);
 40e:	e1 e8       	ldi	r30, 0x81	; 129
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	88 61       	ori	r24, 0x18	; 24
 416:	80 83       	st	Z, r24
	 TCCR1B |= (1 << CS10);  /* /1 prescaling -- counting in microseconds */
 418:	80 81       	ld	r24, Z
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 83       	st	Z, r24
	 ICR1 = 20000;                                    /* TOP value = 20ms */
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	9e e4       	ldi	r25, 0x4E	; 78
 422:	e6 e8       	ldi	r30, 0x86	; 134
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
	 TCCR1A |= (1 << COM1A1);
 42a:	f1 01       	movw	r30, r2
 42c:	80 81       	ld	r24, Z
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	80 83       	st	Z, r24
	 /* Direct output on PB1 / OC1A */
	 DDRB |= (1 << PINB1);                            /* set pin for output */
 432:	21 9a       	sbi	0x04, 1	; 4
		 L293D_stop();                    // Stop the` car

		  initTimer1Servo();              
		 
		  
		   OCR1A = PULSE_MIN;             // Move the servo motor right (ultrasonic)
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	93 e0       	ldi	r25, 0x03	; 3
 438:	f7 01       	movw	r30, r14
 43a:	91 83       	std	Z+1, r25	; 0x01
 43c:	80 83       	st	Z, r24
 43e:	9f e3       	ldi	r25, 0x3F	; 63
 440:	ed e0       	ldi	r30, 0x0D	; 13
 442:	f3 e0       	ldi	r31, 0x03	; 3
 444:	91 50       	subi	r25, 0x01	; 1
 446:	e0 40       	sbci	r30, 0x00	; 0
 448:	f0 40       	sbci	r31, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
		  _delay_ms(1000);                // wait                   
		 
		  
		  
		  distance = 0;
 450:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <distance>
 454:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <distance+0x1>
 458:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <distance+0x2>
 45c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <distance+0x3>
 460:	0a e0       	ldi	r16, 0x0A	; 10
 462:	10 e0       	ldi	r17, 0x00	; 0
		  for(i = 0; i < 10 ; i++){
			  Take_Reading();
 464:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Take_Reading>
			  distance +=  num_of_pulses / 58;
 468:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <num_of_pulses>
 46c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <num_of_pulses+0x1>
 470:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num_of_pulses+0x2>
 474:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num_of_pulses+0x3>
 478:	a5 01       	movw	r20, r10
 47a:	94 01       	movw	r18, r8
 47c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divmodsi4>
 480:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 484:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 488:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 48c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	a4 1f       	adc	r26, r20
 496:	b5 1f       	adc	r27, r21
 498:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <distance>
 49c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <distance+0x1>
 4a0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <distance+0x2>
 4a4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <distance+0x3>
 4a8:	83 ec       	ldi	r24, 0xC3	; 195
 4aa:	99 e0       	ldi	r25, 0x09	; 9
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
 4b4:	01 50       	subi	r16, 0x01	; 1
 4b6:	11 09       	sbc	r17, r1
		  _delay_ms(1000);                // wait                   
		 
		  
		  
		  distance = 0;
		  for(i = 0; i < 10 ; i++){
 4b8:	a9 f6       	brne	.-86     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			  Take_Reading();
			  distance +=  num_of_pulses / 58;
			  _delay_ms(10);
		  }
		  
		  distance = distance / 10;
 4ba:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <distance>
 4be:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <distance+0x1>
 4c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <distance+0x2>
 4c6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <distance+0x3>
 4ca:	a3 01       	movw	r20, r6
 4cc:	92 01       	movw	r18, r4
 4ce:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodsi4>
 4d2:	da 01       	movw	r26, r20
 4d4:	c9 01       	movw	r24, r18
 4d6:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <distance>
 4da:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <distance+0x1>
 4de:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <distance+0x2>
 4e2:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <distance+0x3>
 4e6:	4a e0       	ldi	r20, 0x0A	; 10
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>
		  
		  
		  itoa(distance,show_a,10);
		  USART_sendString(show_a);
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	0e 94 b2 03 	call	0x764	; 0x764 <USART_sendString>
		  USART_send('\n');
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	0e 94 aa 03 	call	0x754	; 0x754 <USART_send>
		  
		  
		  if(distance > 50){              // If distance at right is greater than 60
 500:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 504:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 508:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 50c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 510:	c3 97       	sbiw	r24, 0x33	; 51
 512:	a1 05       	cpc	r26, r1
 514:	b1 05       	cpc	r27, r1
 516:	c8 f0       	brcs	.+50     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		   L293D_setSpeed(255);           // Set speed to max
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
		   L293D_moveRight();             // Move right                 
 520:	0e 94 b8 00 	call	0x170	; 0x170 <L293D_moveRight>
 524:	9f e9       	ldi	r25, 0x9F	; 159
 526:	e6 e8       	ldi	r30, 0x86	; 134
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	e0 40       	sbci	r30, 0x00	; 0
 52e:	f0 40       	sbci	r31, 0x00	; 0
 530:	e1 f7       	brne	.-8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 534:	00 00       	nop
		   _delay_ms(500);                  
		   L293D_setSpeed(150);           // Set speed to a reasonable value
 536:	86 e9       	ldi	r24, 0x96	; 150
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
		  L293D_stop();
 53e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <L293D_stop>
		  Stop_flag = 1;                  // the car is at stop state waiting for external command to move
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <Stop_flag>
 548:	f0 ce       	rjmp	.-544    	; 0x32a <main+0x9a>
		  
		  }
		  else{
             
			  
			  OCR1A = PULSE_MAX;
 54a:	88 e9       	ldi	r24, 0x98	; 152
 54c:	98 e0       	ldi	r25, 0x08	; 8
 54e:	f7 01       	movw	r30, r14
 550:	91 83       	std	Z+1, r25	; 0x01
 552:	80 83       	st	Z, r24
 554:	9f e3       	ldi	r25, 0x3F	; 63
 556:	ed e0       	ldi	r30, 0x0D	; 13
 558:	f3 e0       	ldi	r31, 0x03	; 3
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	e0 40       	sbci	r30, 0x00	; 0
 55e:	f0 40       	sbci	r31, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 564:	00 00       	nop
			 _delay_ms(1000);
			
			  distance = 0;
 566:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <distance>
 56a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <distance+0x1>
 56e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <distance+0x2>
 572:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <distance+0x3>
 576:	0a e0       	ldi	r16, 0x0A	; 10
 578:	10 e0       	ldi	r17, 0x00	; 0
			  for(i = 0; i < 10 ; i++){
				  Take_Reading();
 57a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Take_Reading>
				  distance +=  num_of_pulses / 58;
 57e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <num_of_pulses>
 582:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <num_of_pulses+0x1>
 586:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num_of_pulses+0x2>
 58a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num_of_pulses+0x3>
 58e:	a5 01       	movw	r20, r10
 590:	94 01       	movw	r18, r8
 592:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divmodsi4>
 596:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 59a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 59e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 5a2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 5a6:	82 0f       	add	r24, r18
 5a8:	93 1f       	adc	r25, r19
 5aa:	a4 1f       	adc	r26, r20
 5ac:	b5 1f       	adc	r27, r21
 5ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <distance>
 5b2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <distance+0x1>
 5b6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <distance+0x2>
 5ba:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <distance+0x3>
 5be:	83 ec       	ldi	r24, 0xC3	; 195
 5c0:	99 e0       	ldi	r25, 0x09	; 9
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c8:	00 00       	nop
 5ca:	01 50       	subi	r16, 0x01	; 1
 5cc:	11 09       	sbc	r17, r1
			  
			  OCR1A = PULSE_MAX;
			 _delay_ms(1000);
			
			  distance = 0;
			  for(i = 0; i < 10 ; i++){
 5ce:	a9 f6       	brne	.-86     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
				  Take_Reading();
				  distance +=  num_of_pulses / 58;
				  _delay_ms(10);
			  }
			  
			  distance = distance / 10;
 5d0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <distance>
 5d4:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <distance+0x1>
 5d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <distance+0x2>
 5dc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <distance+0x3>
 5e0:	a3 01       	movw	r20, r6
 5e2:	92 01       	movw	r18, r4
 5e4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodsi4>
 5e8:	da 01       	movw	r26, r20
 5ea:	c9 01       	movw	r24, r18
 5ec:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <distance>
 5f0:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <distance+0x1>
 5f4:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <distance+0x2>
 5f8:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <distance+0x3>
 5fc:	4a e0       	ldi	r20, 0x0A	; 10
 5fe:	be 01       	movw	r22, r28
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	0e 94 2a 04 	call	0x854	; 0x854 <__itoa_ncheck>
			 
			  
			  itoa(distance,show_a,10);
			  USART_sendString(show_a);
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 b2 03 	call	0x764	; 0x764 <USART_sendString>
			  USART_send('\n');
 610:	8a e0       	ldi	r24, 0x0A	; 10
 612:	0e 94 aa 03 	call	0x754	; 0x754 <USART_send>
			  
			  if(distance > 50){
 616:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <distance>
 61a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <distance+0x1>
 61e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <distance+0x2>
 622:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <distance+0x3>
 626:	c3 97       	sbiw	r24, 0x33	; 51
 628:	a1 05       	cpc	r26, r1
 62a:	b1 05       	cpc	r27, r1
 62c:	08 f4       	brcc	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62e:	7d ce       	rjmp	.-774    	; 0x32a <main+0x9a>
				L293D_setSpeed(255);
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
			    L293D_moveLeft();
 638:	0e 94 a7 00 	call	0x14e	; 0x14e <L293D_moveLeft>
 63c:	9f e9       	ldi	r25, 0x9F	; 159
 63e:	e6 e8       	ldi	r30, 0x86	; 134
 640:	f1 e0       	ldi	r31, 0x01	; 1
 642:	91 50       	subi	r25, 0x01	; 1
 644:	e0 40       	sbci	r30, 0x00	; 0
 646:	f0 40       	sbci	r31, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 64c:	00 00       	nop
				_delay_ms(500);
				L293D_setSpeed(150);
 64e:	86 e9       	ldi	r24, 0x96	; 150
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
				L293D_stop();
 656:	0e 94 e7 00 	call	0x1ce	; 0x1ce <L293D_stop>
				Stop_flag = 1;
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <Stop_flag>
 660:	64 ce       	rjmp	.-824    	; 0x32a <main+0x9a>

00000662 <USART_init>:
unsigned char Stop_flag  = 1;


//initalize
void USART_init(int BaudRate , int FOSC){
	UCSR0A  = (1 << U2X0);
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) ;
 668:	88 e9       	ldi	r24, 0x98	; 152
 66a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* This was for synchronous operation only */
	//UCSRC = (1 << UCSZ0) | (1 << UCSZ1)|(1 << URSEL);
	//int br = FOSC / (16 * BaudRate) - 1;
	UBRR0L = 12;
 66e:	8c e0       	ldi	r24, 0x0C	; 12
 670:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = 0;
 674:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 678:	08 95       	ret

0000067a <__vector_18>:
*/

// Receive interrupt if the micro controller raises an interrupt that data is ready
// this will execute 
ISR(USART_RX_vect)   // must be written as RX not RXC
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	4f 93       	push	r20
 68a:	5f 93       	push	r21
 68c:	6f 93       	push	r22
 68e:	7f 93       	push	r23
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	af 93       	push	r26
 696:	bf 93       	push	r27
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
	   returned = UDR0;   // returned   <- UDR0
 69c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <returned>
	   unsigned char c = returned;    // C -> returned
 6a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <returned>
	   if( distance > 30 ){    // if motor farther than the threshold distance 
 6a8:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <distance>
 6ac:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <distance+0x1>
 6b0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <distance+0x2>
 6b4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <distance+0x3>
 6b8:	4f 31       	cpi	r20, 0x1F	; 31
 6ba:	51 05       	cpc	r21, r1
 6bc:	61 05       	cpc	r22, r1
 6be:	71 05       	cpc	r23, r1
 6c0:	b0 f1       	brcs	.+108    	; 0x72e <__vector_18+0xb4>
	   if(c == 'M')           //states for motor speed
 6c2:	8d 34       	cpi	r24, 0x4D	; 77
 6c4:	31 f4       	brne	.+12     	; 0x6d2 <__vector_18+0x58>
	   L293D_setSpeed(UDR0);  // Set speed based on the second value  
 6c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 70 00 	call	0xe0	; 0xe0 <L293D_setSpeed>
 6d0:	30 c0       	rjmp	.+96     	; 0x732 <__vector_18+0xb8>
	   else if(c == 'F'){      // If forward is pressed send forward
 6d2:	86 34       	cpi	r24, 0x46	; 70
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <__vector_18+0x66>
	   L293D_moveForward();
 6d6:	0e 94 84 00 	call	0x108	; 0x108 <L293D_moveForward>
	   Stop_flag = 0;
 6da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Stop_flag>
 6de:	29 c0       	rjmp	.+82     	; 0x732 <__vector_18+0xb8>
	   }
	   else if(c == 'B'){
 6e0:	82 34       	cpi	r24, 0x42	; 66
 6e2:	29 f4       	brne	.+10     	; 0x6ee <__vector_18+0x74>
	   L293D_moveBackward();
 6e4:	0e 94 96 00 	call	0x12c	; 0x12c <L293D_moveBackward>
	   Stop_flag = 0;
 6e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Stop_flag>
 6ec:	22 c0       	rjmp	.+68     	; 0x732 <__vector_18+0xb8>
	   }
	   else if(c  == 'R'){
 6ee:	82 35       	cpi	r24, 0x52	; 82
 6f0:	29 f4       	brne	.+10     	; 0x6fc <__vector_18+0x82>
	   L293D_moveRight();
 6f2:	0e 94 b8 00 	call	0x170	; 0x170 <L293D_moveRight>
	   Stop_flag = 0;
 6f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Stop_flag>
 6fa:	1b c0       	rjmp	.+54     	; 0x732 <__vector_18+0xb8>
	   }
	   else if(c == 'L'){
 6fc:	8c 34       	cpi	r24, 0x4C	; 76
 6fe:	29 f4       	brne	.+10     	; 0x70a <__vector_18+0x90>
	   L293D_moveLeft();
 700:	0e 94 a7 00 	call	0x14e	; 0x14e <L293D_moveLeft>
	   Stop_flag = 0;
 704:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Stop_flag>
 708:	14 c0       	rjmp	.+40     	; 0x732 <__vector_18+0xb8>
	   }
	   else if(c == 'S'){
 70a:	83 35       	cpi	r24, 0x53	; 83
 70c:	31 f4       	brne	.+12     	; 0x71a <__vector_18+0xa0>
	   L293D_stop();
 70e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <L293D_stop>
	   Stop_flag = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Stop_flag>
 718:	0c c0       	rjmp	.+24     	; 0x732 <__vector_18+0xb8>
	     }
		else if(c == 'I'){
 71a:	89 34       	cpi	r24, 0x49	; 73
 71c:	19 f4       	brne	.+6      	; 0x724 <__vector_18+0xaa>
		L293_moveLeftForward();
 71e:	0e 94 c8 00 	call	0x190	; 0x190 <L293_moveLeftForward>
 722:	07 c0       	rjmp	.+14     	; 0x732 <__vector_18+0xb8>
		Stop_flag == 0;
		}
		else if(c == 'E'){
 724:	85 34       	cpi	r24, 0x45	; 69
 726:	29 f4       	brne	.+10     	; 0x732 <__vector_18+0xb8>
		L293_moveLeftForward();
 728:	0e 94 c8 00 	call	0x190	; 0x190 <L293_moveLeftForward>
 72c:	02 c0       	rjmp	.+4      	; 0x732 <__vector_18+0xb8>
		Stop_flag == 0;
		}
	   }
	   else{   // else Stop
		  L293D_stop(); 
 72e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <L293D_stop>
	   }
	//USART_send(returned);	
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <USART_send>:
void USART_send(unsigned char c){            //Used polling not interrupt
	while(!(UCSR0A & (1 << UDRE0)));         // wait for the previous character to be sent 
 754:	e0 ec       	ldi	r30, 0xC0	; 192
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	90 81       	ld	r25, Z
 75a:	95 ff       	sbrs	r25, 5
 75c:	fd cf       	rjmp	.-6      	; 0x758 <USART_send+0x4>
	UDR0 = c;                                // Send this character  
 75e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 762:	08 95       	ret

00000764 <USART_sendString>:
	unsigned char to_be_returned = returned;
	returned = '0';
	return to_be_returned;	
}
*/
void USART_sendString(char *S){
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	ec 01       	movw	r28, r24
    int i = 0;
	while(S[i] != '\0'){
 76a:	88 81       	ld	r24, Y
 76c:	88 23       	and	r24, r24
 76e:	31 f0       	breq	.+12     	; 0x77c <USART_sendString+0x18>
 770:	21 96       	adiw	r28, 0x01	; 1
		USART_send(S[i]);
 772:	0e 94 aa 03 	call	0x754	; 0x754 <USART_send>
	return to_be_returned;	
}
*/
void USART_sendString(char *S){
    int i = 0;
	while(S[i] != '\0'){
 776:	89 91       	ld	r24, Y+
 778:	81 11       	cpse	r24, r1
 77a:	fb cf       	rjmp	.-10     	; 0x772 <USART_sendString+0xe>
		USART_send(S[i]);
		i++;
	}	
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <__divmodhi4>:
 782:	97 fb       	bst	r25, 7
 784:	07 2e       	mov	r0, r23
 786:	16 f4       	brtc	.+4      	; 0x78c <__divmodhi4+0xa>
 788:	00 94       	com	r0
 78a:	07 d0       	rcall	.+14     	; 0x79a <__divmodhi4_neg1>
 78c:	77 fd       	sbrc	r23, 7
 78e:	09 d0       	rcall	.+18     	; 0x7a2 <__divmodhi4_neg2>
 790:	0e 94 16 04 	call	0x82c	; 0x82c <__udivmodhi4>
 794:	07 fc       	sbrc	r0, 7
 796:	05 d0       	rcall	.+10     	; 0x7a2 <__divmodhi4_neg2>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__divmodhi4_exit>

0000079a <__divmodhi4_neg1>:
 79a:	90 95       	com	r25
 79c:	81 95       	neg	r24
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__divmodhi4_neg2>:
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255

000007a8 <__divmodhi4_exit>:
 7a8:	08 95       	ret

000007aa <__udivmodsi4>:
 7aa:	a1 e2       	ldi	r26, 0x21	; 33
 7ac:	1a 2e       	mov	r1, r26
 7ae:	aa 1b       	sub	r26, r26
 7b0:	bb 1b       	sub	r27, r27
 7b2:	fd 01       	movw	r30, r26
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <__udivmodsi4_ep>

000007b6 <__udivmodsi4_loop>:
 7b6:	aa 1f       	adc	r26, r26
 7b8:	bb 1f       	adc	r27, r27
 7ba:	ee 1f       	adc	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	a2 17       	cp	r26, r18
 7c0:	b3 07       	cpc	r27, r19
 7c2:	e4 07       	cpc	r30, r20
 7c4:	f5 07       	cpc	r31, r21
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__udivmodsi4_ep>
 7c8:	a2 1b       	sub	r26, r18
 7ca:	b3 0b       	sbc	r27, r19
 7cc:	e4 0b       	sbc	r30, r20
 7ce:	f5 0b       	sbc	r31, r21

000007d0 <__udivmodsi4_ep>:
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	1a 94       	dec	r1
 7da:	69 f7       	brne	.-38     	; 0x7b6 <__udivmodsi4_loop>
 7dc:	60 95       	com	r22
 7de:	70 95       	com	r23
 7e0:	80 95       	com	r24
 7e2:	90 95       	com	r25
 7e4:	9b 01       	movw	r18, r22
 7e6:	ac 01       	movw	r20, r24
 7e8:	bd 01       	movw	r22, r26
 7ea:	cf 01       	movw	r24, r30
 7ec:	08 95       	ret

000007ee <__divmodsi4>:
 7ee:	05 2e       	mov	r0, r21
 7f0:	97 fb       	bst	r25, 7
 7f2:	1e f4       	brtc	.+6      	; 0x7fa <__divmodsi4+0xc>
 7f4:	00 94       	com	r0
 7f6:	0e 94 0e 04 	call	0x81c	; 0x81c <__negsi2>
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	07 d0       	rcall	.+14     	; 0x80c <__divmodsi4_neg2>
 7fe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodsi4>
 802:	07 fc       	sbrc	r0, 7
 804:	03 d0       	rcall	.+6      	; 0x80c <__divmodsi4_neg2>
 806:	4e f4       	brtc	.+18     	; 0x81a <__divmodsi4_exit>
 808:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__negsi2>

0000080c <__divmodsi4_neg2>:
 80c:	50 95       	com	r21
 80e:	40 95       	com	r20
 810:	30 95       	com	r19
 812:	21 95       	neg	r18
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	4f 4f       	sbci	r20, 0xFF	; 255
 818:	5f 4f       	sbci	r21, 0xFF	; 255

0000081a <__divmodsi4_exit>:
 81a:	08 95       	ret

0000081c <__negsi2>:
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__udivmodhi4>:
 82c:	aa 1b       	sub	r26, r26
 82e:	bb 1b       	sub	r27, r27
 830:	51 e1       	ldi	r21, 0x11	; 17
 832:	07 c0       	rjmp	.+14     	; 0x842 <__udivmodhi4_ep>

00000834 <__udivmodhi4_loop>:
 834:	aa 1f       	adc	r26, r26
 836:	bb 1f       	adc	r27, r27
 838:	a6 17       	cp	r26, r22
 83a:	b7 07       	cpc	r27, r23
 83c:	10 f0       	brcs	.+4      	; 0x842 <__udivmodhi4_ep>
 83e:	a6 1b       	sub	r26, r22
 840:	b7 0b       	sbc	r27, r23

00000842 <__udivmodhi4_ep>:
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	5a 95       	dec	r21
 848:	a9 f7       	brne	.-22     	; 0x834 <__udivmodhi4_loop>
 84a:	80 95       	com	r24
 84c:	90 95       	com	r25
 84e:	bc 01       	movw	r22, r24
 850:	cd 01       	movw	r24, r26
 852:	08 95       	ret

00000854 <__itoa_ncheck>:
 854:	bb 27       	eor	r27, r27
 856:	4a 30       	cpi	r20, 0x0A	; 10
 858:	31 f4       	brne	.+12     	; 0x866 <__itoa_ncheck+0x12>
 85a:	99 23       	and	r25, r25
 85c:	22 f4       	brpl	.+8      	; 0x866 <__itoa_ncheck+0x12>
 85e:	bd e2       	ldi	r27, 0x2D	; 45
 860:	90 95       	com	r25
 862:	81 95       	neg	r24
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	0c 94 36 04 	jmp	0x86c	; 0x86c <__utoa_common>

0000086a <__utoa_ncheck>:
 86a:	bb 27       	eor	r27, r27

0000086c <__utoa_common>:
 86c:	fb 01       	movw	r30, r22
 86e:	55 27       	eor	r21, r21
 870:	aa 27       	eor	r26, r26
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	aa 1f       	adc	r26, r26
 878:	a4 17       	cp	r26, r20
 87a:	10 f0       	brcs	.+4      	; 0x880 <__utoa_common+0x14>
 87c:	a4 1b       	sub	r26, r20
 87e:	83 95       	inc	r24
 880:	50 51       	subi	r21, 0x10	; 16
 882:	b9 f7       	brne	.-18     	; 0x872 <__utoa_common+0x6>
 884:	a0 5d       	subi	r26, 0xD0	; 208
 886:	aa 33       	cpi	r26, 0x3A	; 58
 888:	08 f0       	brcs	.+2      	; 0x88c <__utoa_common+0x20>
 88a:	a9 5d       	subi	r26, 0xD9	; 217
 88c:	a1 93       	st	Z+, r26
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	79 f7       	brne	.-34     	; 0x870 <__utoa_common+0x4>
 892:	b1 11       	cpse	r27, r1
 894:	b1 93       	st	Z+, r27
 896:	11 92       	st	Z+, r1
 898:	cb 01       	movw	r24, r22
 89a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <strrev>

0000089e <strrev>:
 89e:	dc 01       	movw	r26, r24
 8a0:	fc 01       	movw	r30, r24
 8a2:	67 2f       	mov	r22, r23
 8a4:	71 91       	ld	r23, Z+
 8a6:	77 23       	and	r23, r23
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <strrev+0x4>
 8aa:	32 97       	sbiw	r30, 0x02	; 2
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <strrev+0x18>
 8ae:	7c 91       	ld	r23, X
 8b0:	6d 93       	st	X+, r22
 8b2:	70 83       	st	Z, r23
 8b4:	62 91       	ld	r22, -Z
 8b6:	ae 17       	cp	r26, r30
 8b8:	bf 07       	cpc	r27, r31
 8ba:	c8 f3       	brcs	.-14     	; 0x8ae <strrev+0x10>
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
